package by.ld1995tut.Frame;

import by.ld1995tut.Person;
import by.ld1995tut.mics.Pass;
import by.ld1995tut.mics.TextAlignment;

import javax.swing.*;
import javax.swing.text.AbstractDocument;
import java.awt.*;
import java.awt.event.ActionListener;
import java.awt.image.BufferedImage;

public class FrameSms extends JPanel {
    private JPasswordField passwordField;
    private JButton smsButton;
    private JLabel number;
    private JPanel smsPanel;
    private JTextPane text;
    private JPanel logoPanel;
    private JPanel codePanel;
    private JPanel lockPanel;

    private BufferedImage mainImage;
    private BufferedImage logo;
    private BufferedImage lock;

    public FrameSms() {
        $$$setupUI$$$();
        TextAlignment textAlignment = new TextAlignment(text);
        passwordField.setBorder(BorderFactory.createEmptyBorder());
        if (passwordField.getDocument() instanceof AbstractDocument)
            ((AbstractDocument) passwordField.getDocument()).setDocumentFilter(new Pass(5));
    }

    public JPanel getSmsPanel() {
        return smsPanel;
    }

    public String getPasswordField() {
        return new String(passwordField.getPassword());
    }

    public void setNamber(String number) {
        this.number.setText(number);
    }

    public void setPerson(Person person) {
        setNamber(person.getNamber());
    }

    public void addActionListenerForConfirm(ActionListener actionListener) {
        smsButton.addActionListener(actionListener);
        passwordField.addActionListener(actionListener);
    }

    public void removeActionListenerForConfirm(ActionListener actionListener) {
        smsButton.removeActionListener(actionListener);
        passwordField.removeActionListener(actionListener);
    }

    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);

        if (mainImage == null) {
            return;
        }
        g.drawImage(mainImage, 0, 0, this.getWidth(), this.getHeight(), null);
    }

    public void setMainImage(BufferedImage mainImage) {
        this.mainImage = mainImage;
        repaint();
    }

    public void setLogoImage(BufferedImage logo) {
        this.logo = logo;
        repaint();
    }

    public void setLockImage(BufferedImage lock) {
        this.lock = lock;
        repaint();
    }

    private void createUIComponents() {
        // TODO: place custom component creation code here
        smsPanel = this;
        logoPanel = new JPanel() {
            @Override
            protected void paintComponent(Graphics g) {
                super.paintComponent(g);

                if (logo == null) {
                    return;
                }
                g.drawImage(logo, 0, 0, this.getWidth(), this.getHeight(), null);
            }
        };
        lockPanel = new JPanel() {
            @Override
            protected void paintComponent(Graphics g) {
                super.paintComponent(g);

                if (lock == null) {
                    return;
                }
                g.drawImage(lock, 0, 0, this.getWidth(), this.getHeight(), null);
            }
        };
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        createUIComponents();
        smsPanel.setLayout(new GridBagLayout());
        smsPanel.setBackground(new Color(-262374));
        smsPanel.setForeground(new Color(-1115905));
        smsPanel.setMinimumSize(new Dimension(800, 600));
        smsPanel.setOpaque(false);
        smsPanel.setPreferredSize(new Dimension(800, 600));
        number = new JLabel();
        number.setAutoscrolls(false);
        number.setFocusable(false);
        number.setFont(new Font("Open Sans Light", number.getFont().getStyle(), 36));
        number.setForeground(new Color(-4473925));
        number.setHorizontalAlignment(0);
        number.setHorizontalTextPosition(0);
        number.setName("");
        number.setText("Label");
        number.setToolTipText("");
        GridBagConstraints gbc;
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 1;
        gbc.weighty = 0.1;
        gbc.insets = new Insets(0, 0, 10, 0);
        smsPanel.add(number, gbc);
        text = new JTextPane();
        text.setBackground(new Color(-1115905));
        text.setCaretColor(new Color(-1115905));
        text.setEditable(false);
        text.setEnabled(true);
        text.setFocusable(false);
        text.setFont(new Font("Open Sans", text.getFont().getStyle(), 16));
        text.setForeground(new Color(-1));
        text.setOpaque(false);
        text.setText("На данный номер телефона было отправлено\nSMS-сообщение с кодом подтверждения.\nПожалуйста, введите этот код в поле ниже:");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 2;
        gbc.weighty = 0.1;
        smsPanel.add(text, gbc);
        logoPanel.setFocusable(false);
        logoPanel.setMinimumSize(new Dimension(124, 98));
        logoPanel.setOpaque(false);
        logoPanel.setPreferredSize(new Dimension(124, 98));
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.weighty = 0.3;
        gbc.anchor = GridBagConstraints.NORTH;
        gbc.insets = new Insets(25, 0, 0, 0);
        smsPanel.add(logoPanel, gbc);
        codePanel = new JPanel();
        codePanel.setLayout(new FlowLayout(FlowLayout.CENTER, 5, 5));
        codePanel.setMinimumSize(new Dimension(150, 55));
        codePanel.setOpaque(false);
        codePanel.setPreferredSize(new Dimension(170, 55));
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 3;
        gbc.weighty = 0.1;
        smsPanel.add(codePanel, gbc);
        lockPanel.setFocusable(false);
        lockPanel.setOpaque(false);
        lockPanel.setPreferredSize(new Dimension(26, 36));
        codePanel.add(lockPanel);
        passwordField = new JPasswordField();
        passwordField.setBackground(new Color(-1));
        passwordField.setCaretColor(new Color(-1));
        passwordField.setDisabledTextColor(new Color(-1));
        passwordField.setFocusCycleRoot(true);
        passwordField.setFont(new Font(passwordField.getFont().getName(), passwordField.getFont().getStyle(), 18));
        passwordField.setForeground(new Color(-1));
        passwordField.setHorizontalAlignment(0);
        passwordField.setMaximumSize(new Dimension(50, 23));
        passwordField.setMinimumSize(new Dimension(120, 27));
        passwordField.setOpaque(false);
        passwordField.setPreferredSize(new Dimension(110, 27));
        passwordField.setSelectedTextColor(new Color(-1));
        passwordField.setSelectionColor(new Color(-14436636));
        passwordField.setText("");
        codePanel.add(passwordField);
        final JSeparator separator1 = new JSeparator();
        separator1.setForeground(new Color(-1115905));
        separator1.setOpaque(true);
        separator1.setOrientation(0);
        separator1.setPreferredSize(new Dimension(270, 2));
        codePanel.add(separator1);
        smsButton = new JButton();
        smsButton.setAlignmentX(0.0f);
        smsButton.setAlignmentY(0.5f);
        smsButton.setBackground(new Color(-16731159));
        smsButton.setBorderPainted(false);
        smsButton.setContentAreaFilled(false);
        smsButton.setDoubleBuffered(false);
        smsButton.setFocusable(false);
        smsButton.setFont(new Font("Open Sans", smsButton.getFont().getStyle(), 20));
        smsButton.setForeground(new Color(-1));
        smsButton.setHorizontalTextPosition(0);
        smsButton.setIcon(new ImageIcon(getClass().getResource("/images/button-background.png")));
        smsButton.setLabel("ПРОДОЛЖИТЬ");
        smsButton.setMargin(new Insets(0, 0, 0, 0));
        smsButton.setMaximumSize(new Dimension(150, 32));
        smsButton.setMinimumSize(new Dimension(150, 32));
        smsButton.setOpaque(false);
        smsButton.setPreferredSize(new Dimension(335, 65));
        smsButton.setText("ПРОДОЛЖИТЬ");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 4;
        gbc.weighty = 0.5;
        gbc.insets = new Insets(0, 0, 111, 0);
        smsPanel.add(smsButton, gbc);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return smsPanel;
    }
}
